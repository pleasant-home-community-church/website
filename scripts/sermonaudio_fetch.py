from argparse import ArgumentParser, Namespace
from pathlib import Path
from os import environ
from typing import Optional

from dotenv import load_dotenv
from loguru import logger
from pydantic import BaseModel, ConfigDict, Field, with_config
from sermonaudio import set_api_key
from sermonaudio.models import SeriesSortOrder, SermonSortOption
from sermonaudio.node.requests import Node


class Media(BaseModel):
    model_config = ConfigDict(extra="ignore")

    type: str
    mediaType: str
    live: bool
    streamURL: Optional[str] = Field(default=None)
    eventStreamURL: Optional[str] = Field(default=None)
    downloadURL: Optional[str] = Field(default=None)
    thumbnailImageURL: Optional[str] = Field(default=None)
    bitrate: Optional[int]
    fileSizeBytes: Optional[int] = Field(default=None)
    adaptiveBitrate: bool
    duration: Optional[int] = Field(default=None)
    audioCodec: Optional[str] = Field(default=None)
    videoCodec: Optional[str] = Field(default=None)
    language: Optional[str] = Field(default=None)
    mediaFilename: str
    autoGenerated: Optional[bool] = Field(default=None)


class MediaSet(BaseModel):
    model_config = ConfigDict(extra="ignore")

    type: str
    audio: list[Media]
    video: list[Media]
    text: list[Media]
    caption: list[Media]


class LiteSermonSeries(BaseModel):
    model_config = ConfigDict(extra="ignore")

    type: str
    id: int = Field(alias="seriesID")


class LiteSermonSpeaker(BaseModel):
    model_config = ConfigDict(extra="ignore")

    type: str
    id: int = Field(alias="speakerID")
    displayName: Optional[str] = Field(default=None)
    portaitURL: Optional[str] = Field(default=None)
    albumArtURL: Optional[str] = Field(default=None)
    roundedThumbnailImageURL: Optional[str] = Field(default=None)
    portraitURLResizable: Optional[str] = Field(default=True)
    roundedThumbnailImageURLResizable: Optional[str] = Field(default=True)


class Speaker(BaseModel):
    model_config = ConfigDict(extra="ignore")

    type: str
    id: int = Field(alias="speakerID")
    displayName: Optional[str] = Field(default=None)
    portaitURL: Optional[str] = Field(default=None)
    albumArtURL: Optional[str] = Field(default=None)
    roundedThumbnailImageURL: Optional[str] = Field(default=None)
    portraitURLResizable: Optional[str] = Field(default=True)
    roundedThumbnailImageURLResizable: Optional[str] = Field(default=True)
    sortName: Optional[str] = Field(default=None)
    bio: Optional[str] = Field(default=None)


class Broadcaster(BaseModel):
    model_config = ConfigDict(extra="ignore")

    type: str
    lite_type: str
    id: str = Field(alias="broadcasterID")
    displayName: str
    location: str
    imageURL: str
    imageURLResizable: str
    languageCode: str
    shortName: str
    homePageURL: str
    albumArtURL: str
    listenLineNumber: Optional[str] = Field(default=None)
    categories: int
    welcomeVideoID: Optional[str] = Field(default=None)
    disabled: bool
    groups: Optional[list[str]] = Field(default_factory=list)
    bannerImageURL: str


class Sermon(BaseModel):
    model_config = ConfigDict(extra="ignore")

    id: str = Field(alias="sermonID")
    fullTitle: str
    displayTitle: str
    languageCode: str
    bibleText: Optional[str] = Field(default=None)
    subtitle: Optional[str] = Field(default=None)
    moreInfoText: Optional[str] = Field(default=None)
    eventType: str
    broadcaster: Broadcaster
    speaker: LiteSermonSpeaker
    series: Optional[LiteSermonSeries] = Field(default=None)
    hasAudio: bool
    hasVideo: bool
    hasPDF: bool
    audioDurationSeconds: Optional[int] = Field(default=None)
    videoDurationSeconds: Optional[int] = Field(default=None)
    preachDate: str
    publishTimestamp: int
    type: str
    updateDate: Optional[int] = Field(default=None)
    publishDate: str
    displayEventType: str
    externalLink: Optional[str] = Field(default=None)
    media: MediaSet
    waveformPeaksURL: str
    keywords: Optional[str] = Field(default=None)


class Series(BaseModel):
    model_config = ConfigDict(extra="ignore")

    type: str
    id: int = Field(alias="seriesID")
    title: str
    broadcasterID: str
    latest: Optional[str] = Field(default=None)
    earliest: Optional[str] = Field(default=None)
    updated: Optional[int] = Field(default=None)
    count: int
    description: Optional[str] = Field(default=None)
    podcastEnabled: Optional[bool] = Field(default=None)
    podcaseSpeaker: Optional[str] = Field(default=None)
    image: Optional[str] = Field(default=None)
    imageResizable: Optional[str] = Field(default=None)
    defaultSortBy: Optional[str] = Field(default=None)


def parse_args():
    """
    Parse the command line arguments using the argparse library.

    Returns:
        Namespace: A Namespace object containing the parsed arguments.
    """

    parser = ArgumentParser()
    parser.add_argument("--data-dir", type=str, required=True)
    return parser.parse_args()


def fetch_sermons(sermons_dir: Path) -> None:
    sermons_dir.mkdir(parents=True, exist_ok=True)

    page: int = 0
    total: int = 0
    while page == 0 or total < paged.total_count:
        page += 1
        paged = Node.get_sermons(
            broadcaster_id="phcc",
            page=page,
            page_size=100,
            sort_by=SermonSortOption.NEWEST_PUBLISHED,
        )
        total += len(paged.results)

        # conver the results to sermons
        for result in paged.results:
            sermon: Sermon = Sermon(**result._Model__obj)
            sermon_file: Path = sermons_dir / f"{sermon.id}.json"
            sermon_file.write_text(
                sermon.model_dump_json(indent=2, exclude_none=True, exclude_unset=True)
            )
            logger.debug(f"{sermon.id} - {sermon.displayTitle}")

    logger.info(f"fetched {total} sermons")


def fetch_series(series_dir: Path) -> None:
    series_dir.mkdir(parents=True, exist_ok=True)

    page: int = 0
    total: int = 0
    while page == 0 or total < paged.total_count:
        page += 1
        paged = Node.get_series_list(
            broadcaster_id="phcc",
            page=page,
            page_size=100,
            sort_by=SeriesSortOrder.NEWEST_SERMON_CREATE_DATE,
        )
        total += len(paged.results)

        # conver the results to series
        for result in paged.results:
            series: Series = Series(**result._Model__obj)
            series_file: Path = series_dir / f"{series.id}.json"
            series_file.write_text(
                series.model_dump_json(indent=2, exclude_none=True, exclude_unset=True)
            )
            logger.debug(f"{series.id} - {series.title}")

    logger.info(f"fetched {total} series")


def fetch_speakers(speakers_dir: Path) -> None:
    speakers_dir.mkdir(parents=True, exist_ok=True)

    page: int = 0
    total: int = 0
    while page == 0 or len(results) > 0:
        page += 1
        results = Node.get_speakers(
            broadcaster_id="phcc",
            params={"page": page},
            page_size=100,
        )
        # break if no results returned
        if len(results) == 0:
            break

        # conver the results to series
        total += len(results)
        for result in results:
            speaker: Speaker = Speaker(**result._Model__obj)
            speaker_file: Path = speakers_dir / f"{speaker.id}.json"
            speaker_file.write_text(
                speaker.model_dump_json(indent=2, exclude_none=True, exclude_unset=True)
            )
            logger.debug(f"{speaker.id} - {speaker.displayName}")

    logger.info(f"fetched {total} speakers")


def main():
    args: Namespace = parse_args()
    data_dir: Path = Path(args.data_dir)
    data_dir.mkdir(parents=True, exist_ok=True)

    SERMONAUDIO_API_KEY: str = environ.get("SERMONAUDIO_API_KEY")
    set_api_key(SERMONAUDIO_API_KEY)

    fetch_sermons(data_dir / "sermons")
    fetch_series(data_dir / "series")
    fetch_speakers(data_dir / "speakers")


if __name__ == "__main__":
    load_dotenv()
    main()
