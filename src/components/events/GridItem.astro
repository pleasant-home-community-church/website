---
import type { Event } from '~/types';

import Image from '~/components/common/Image.astro';
import { Icon } from 'astro-icon/components';
import { DateTime } from 'luxon';
import Button from '~/components/ui/Button.astro';

export interface Props {
  event: Event;
}

const { event } = Astro.props;
const image = event.imageUrl ? event.imageUrl : '~/assets/images/upcoming-events.jpg';
const link = event.eventUrl;
const registrationOpensAt =
  event.registrationOpensAt != undefined && event.registrationOpensAt != null
    ? DateTime.fromJSDate(event.registrationOpensAt)
    : null;
const callToAction = event.registrationUrl
  ? {
      text: 'Sign Up',
      href: event.registrationUrl,
      target: '_blank',
      icon: 'tabler:arrow-right',
    }
  : registrationOpensAt
    ? {
        text: `Sign Up ${registrationOpensAt.setZone('America/Los_Angeles').toFormat('MMMM dd')}`,
        icon: 'tabler:clock',
      }
    : null;
---

<article
  class="mb-6 transition intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
>
  <div class="relative md:h-64 bg-gray-400 dark:bg-slate-700 rounded shadow-lg mb-6">
    {
      image &&
        (link ? (
          <a href={link} target="_blank">
            <Image
              src={image}
              class="w-full md:h-full rounded shadow-lg bg-gray-400 dark:bg-slate-700"
              widths={[400, 900]}
              width={400}
              sizes="(max-width: 900px) 400px, 900px"
              alt={event.eventName}
              aspectRatio="16:9"
              layout="cover"
              loading="lazy"
              decoding="async"
            />
          </a>
        ) : (
          <Image
            src={image}
            class="w-full md:h-full rounded shadow-lg bg-gray-400 dark:bg-slate-700"
            widths={[400, 900]}
            width={400}
            sizes="(max-width: 900px) 400px, 900px"
            alt={event.eventName}
            aspectRatio="16:9"
            layout="cover"
            loading="lazy"
            decoding="async"
          />
        ))
    }
  </div>
  <h3 class="text-xl sm:text-2xl font-bold leading-tight mb-2 font-heading dark:text-slate-300">
    {
      link ? (
        <a class="inline-block hover:text-primary dark:hover:text-blue-700 transition ease-in duration-200" href={link}>
          {event.eventName}
        </a>
      ) : (
        event.eventName
      )
    }
  </h3>
  <span class="text-sm">
    <Icon name="tabler:clock" class="w-3.5 h-3.5 inline-block -mt-0.5 dark:text-gray-400" />
    {
      event.allDayEvent ? (
        <span>{DateTime.fromJSDate(event.startsAt).setZone('America/Los_Angeles').toFormat('MMMM dd')}</span>
      ) : (
        <span>{DateTime.fromJSDate(event.startsAt).setZone('America/Los_Angeles').toFormat('MMMM dd h:mm a')}</span>
      )
    }
  </span>
  {
    callToAction && (
      <div class="mt-2">
        <Button {...callToAction} />
      </div>
    )
  }
</article>
