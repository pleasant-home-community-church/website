---
import Calendar from '~/components/events/Calendar';
import Layout from '~/layouts/PageLayout.astro';
import { fetchEvents } from '~/utils/events';
import { getCalendarEventDate, getCalendarDateOnly } from '~/utils/utils';
import moment from 'moment';

const metadata = {
  title: 'Events',
};

// const faqHeadline = {
//   headline: {
//     title: 'text-4xl md:text-5xl ',
//   },
// };

// Version 4.1
const pSBC = (p, c0, c1 = false, l = true) => {
  let r,
    g,
    b,
    P,
    f,
    t,
    h,
    m = Math.round,
    a = typeof c1 == 'string';
  if (typeof p != 'number' || p < -1 || p > 1 || typeof c0 != 'string' || (c0[0] != 'r' && c0[0] != '#') || (c1 && !a))
    return null;
  (h = c0.length > 9),
    (h = a ? (c1.length > 9 ? true : c1 == 'c' ? !h : false) : h),
    (f = pSBC.pSBCr(c0)),
    (P = p < 0),
    (t = c1 && c1 != 'c' ? pSBC.pSBCr(c1) : P ? { r: 0, g: 0, b: 0, a: -1 } : { r: 255, g: 255, b: 255, a: -1 }),
    (p = P ? p * -1 : p),
    (P = 1 - p);
  if (!f || !t) return null;
  if (l) (r = m(P * f.r + p * t.r)), (g = m(P * f.g + p * t.g)), (b = m(P * f.b + p * t.b));
  else
    (r = m((P * f.r ** 2 + p * t.r ** 2) ** 0.5)),
      (g = m((P * f.g ** 2 + p * t.g ** 2) ** 0.5)),
      (b = m((P * f.b ** 2 + p * t.b ** 2) ** 0.5));
  (a = f.a), (t = t.a), (f = a >= 0 || t >= 0), (a = f ? (a < 0 ? t : t < 0 ? a : a * P + t * p) : 0);
  if (h) return 'rgb' + (f ? 'a(' : '(') + r + ',' + g + ',' + b + (f ? ',' + m(a * 1000) / 1000 : '') + ')';
  else
    return (
      '#' +
      (4294967296 + r * 16777216 + g * 65536 + b * 256 + (f ? m(a * 255) : 0)).toString(16).slice(1, f ? undefined : -2)
    );
};

pSBC.pSBCr = (d) => {
  const i = parseInt;
  let n = d.length,
    x = {};
  if (n > 9) {
    const [r, g, b, a] = (d = d.split(','));
    n = d.length;
    if (n < 3 || n > 4) return null;
    (x.r = i(r[3] == 'a' ? r.slice(5) : r.slice(4))), (x.g = i(g)), (x.b = i(b)), (x.a = a ? parseFloat(a) : -1);
  } else {
    if (n == 8 || n == 6 || n < 4) return null;
    if (n < 6) d = '#' + d[1] + d[1] + d[2] + d[2] + d[3] + d[3] + (n > 4 ? d[4] + d[4] : '');
    d = i(d.slice(1), 16);
    if (n == 9 || n == 5)
      (x.r = (d >> 24) & 255),
        (x.g = (d >> 16) & 255),
        (x.b = (d >> 8) & 255),
        (x.a = Math.round((d & 255) / 0.255) / 1000);
    else (x.r = d >> 16), (x.g = (d >> 8) & 255), (x.b = d & 255), (x.a = -1);
  }
  return x;
};

const categoryKey = (tag): string => {
  return tag.name.toLowerCase().replace(/[\s'\\/]/g, '');
};

const getMinistry = (event) => {
  let ministry = 'default';
  if (event.tags) {
    event.tags.forEach((tag) => {
      if (tag.group == 'Ministry') {
        ministry = categoryKey(tag);
      }
    });
  }

  return ministry;
};

const allEvents = await fetchEvents();
const events = allEvents
  .map((event) => {
    const ministry = getMinistry(event);
    return {
      id: event.id,
      title: event.eventName,
      start: event.allDayEvent
        ? getCalendarDateOnly(event.visibleStartsAt)
        : getCalendarEventDate(event.visibleStartsAt),
      end: event.allDayEvent ? getCalendarDateOnly(event.visibleEndsAt) : getCalendarEventDate(event.visibleEndsAt),
      calendarId: ministry,
    };
  })
  .sort((a, b) => new Date(a.start).getTime() - new Date(b.start).getTime());

const categories = {
  default: {
    colorName: 'default',
    lightColors: {
      main: '#85cca9',
      container: pSBC(0.65, '#85cca9'),
      onContainer: pSBC(-0.75, '#85cca9'),
    },
  },
};

allEvents.forEach((event) => {
  event.tags?.forEach((tag) => {
    // console.log(tag);
    if (tag.group == 'Ministry') {
      const key = categoryKey(tag);
      if (!(key in categories)) {
        categories[key] = {
          colorName: categoryKey(tag),
          lightColors: {
            main: pSBC(0.0, tag.color),
            container: pSBC(0.65, tag.color),
            onContainer: pSBC(-0.75, tag.color),
          },
        };
      }
    }
  });
});

const minDate = moment().subtract(5, 'weeks');
const maxDate = moment().add(1, 'year').add(5, 'weeks');

// export const prerender = true;
---

<Layout metadata={metadata}>
  <!-- Events List Widget ******************* -->
  <Calendar
    categories={categories}
    events={events}
    minDate={minDate.format('YYYY-MM-DD')}
    maxDate={maxDate.format('YYYY-MM-DD')}
    client:only="react"
  />
</Layout>
