---
import Calendar from '~/components/events/Calendar';
import Layout from '~/layouts/PageLayout.astro';
import { fetchEvents } from '~/utils/events';
import { getCalendarEventDate, getCalendarDateOnly } from '~/utils/utils';
import moment from 'moment';
import { pSBC } from '~/utils/colors';

const metadata = {
  title: 'Events',
};

const allEvents = await fetchEvents();
const events = allEvents
  .map((event) => {
    return {
      id: event.id,
      title: event.eventName,
      start: event.allDayEvent
        ? getCalendarDateOnly(event.visibleStartsAt)
        : getCalendarEventDate(event.visibleStartsAt),
      end: event.allDayEvent ? getCalendarDateOnly(event.visibleEndsAt) : getCalendarEventDate(event.visibleEndsAt),
      calendarId: event.ministry,
    };
  })
  .sort((a, b) => new Date(a.start).getTime() - new Date(b.start).getTime());

const categories = {
  default: {
    colorName: 'default',
    lightColors: {
      main: pSBC(-0.6, '#85cca9'),
      container: pSBC(-0.35, '#85cca9'),
      onContainer: pSBC(0.85, '#85cca9'),
    },
    darkColors: {
      main: pSBC(-0.6, '#85cca9'),
      container: pSBC(-0.35, '#85cca9'),
      onContainer: pSBC(0.85, '#85cca9'),
    },
  },
};

allEvents.forEach((event) => {
  if (event.ministry != 'default') {
    categories[event.ministry] = {
      colorName: event.ministry,
      lightColors: {
        main: pSBC(-0.6, event.color),
        container: pSBC(-0.35, event.color),
        onContainer: pSBC(0.85, event.color),
      },
      darkColors: {
        main: pSBC(-0.6, event.color),
        container: pSBC(-0.35, event.color),
        onContainer: pSBC(0.85, event.color),
      },
    };
  }
});

const minDate = moment().subtract(5, 'weeks');
const maxDate = moment().add(1, 'year').add(5, 'weeks');

// export const prerender = true;
---

<Layout metadata={metadata}>
  <!-- Events List Widget ******************* -->
  <Calendar
    categories={categories}
    events={events}
    minDate={minDate.format('YYYY-MM-DD')}
    maxDate={maxDate.format('YYYY-MM-DD')}
    client:only="react"
  />
</Layout>
